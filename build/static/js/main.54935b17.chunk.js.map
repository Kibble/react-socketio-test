{"version":3,"sources":["logo.svg","useChat.js","App.js","reportWebVitals.js","index.js"],"names":["NEW_CHAT_MESSAGE_EVENT","SOCKET_SERVER_URL","window","location","href","useChat","roomId","useState","messages","setMessages","socketRef","useRef","useEffect","current","socketIOClient","query","on","message","incomingMessage","ownedByCurrentUser","senderId","id","disconnect","sendMessage","messageBody","emit","body","App","className","src","logo","alt","onClick","console","log","target","rel","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8NAAe,G,MAAA,IAA0B,kC,iDCGnCA,EAAyB,iBAEzBC,EAAoBC,OAAOC,SAASC,KAmC3BC,EAhCC,SAACC,GAAY,IAAD,EACMC,mBAAS,IADf,mBACnBC,EADmB,KACTC,EADS,KAEpBC,EAAYC,mBAElBC,qBAAU,WAaR,OAZAF,EAAUG,QAAUC,IAAeb,EAAmB,CACpDc,MAAO,CAAET,YAGXI,EAAUG,QAAQG,GAAGhB,GAAwB,SAACiB,GAC5C,IAAMC,EAAe,2BAChBD,GADgB,IAEnBE,mBAAoBF,EAAQG,WAAaV,EAAUG,QAAQQ,KAE7DZ,GAAY,SAACD,GAAD,4BAAkBA,GAAlB,CAA4BU,UAGnC,WACLR,EAAUG,QAAQS,gBAEnB,CAAChB,IASJ,MAAO,CAAEE,WAAUe,YAPC,SAACC,GACnBd,EAAUG,QAAQY,KAAKzB,EAAwB,CAC7C0B,KAAMF,EACNJ,SAAUV,EAAUG,QAAQQ,QCkBnBM,EAlCH,WAAO,IAAD,EACkBtB,EAAQ,OAAxBkB,GADF,EACRf,SADQ,EACEe,aAUlB,OACE,qBAAKK,UAAU,MAAf,SACE,yBAAQA,UAAU,aAAlB,UACE,qBAAKC,IAAKC,EAAMF,UAAU,WAAWG,IAAI,SACzC,sCACO,8CADP,0BAIA,mBAAGH,UAAU,WAAWxB,KAAK,IAAI4B,QAhBzB,WACZC,QAAQC,IAAI,WAIZX,EAAY,iBAWR,kBAEA,mBACEK,UAAU,WACVxB,KAAK,sBACL+B,OAAO,SACPC,IAAI,sBAJN,+BC1BOC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.54935b17.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import { useEffect, useRef, useState } from \"react\";\r\nimport socketIOClient from \"socket.io-client\";\r\n\r\nconst NEW_CHAT_MESSAGE_EVENT = \"newChatMessage\";\r\n// const SOCKET_SERVER_URL = \"https://kibble-lj-server.herokuapp.com:6009\";\r\nconst SOCKET_SERVER_URL = window.location.href;\r\n\r\n\r\nconst useChat = (roomId) => {\r\n  const [messages, setMessages] = useState([]);\r\n  const socketRef = useRef();\r\n\r\n  useEffect(() => {\r\n    socketRef.current = socketIOClient(SOCKET_SERVER_URL, {\r\n      query: { roomId },\r\n    });\r\n\r\n    socketRef.current.on(NEW_CHAT_MESSAGE_EVENT, (message) => {\r\n      const incomingMessage = {\r\n        ...message,\r\n        ownedByCurrentUser: message.senderId === socketRef.current.id,\r\n      };\r\n      setMessages((messages) => [...messages, incomingMessage]);\r\n    });\r\n\r\n    return () => {\r\n      socketRef.current.disconnect();\r\n    };\r\n  }, [roomId]);\r\n\r\n  const sendMessage = (messageBody) => {\r\n    socketRef.current.emit(NEW_CHAT_MESSAGE_EVENT, {\r\n      body: messageBody,\r\n      senderId: socketRef.current.id,\r\n    });\r\n  };\r\n\r\n  return { messages, sendMessage };\r\n};\r\n\r\nexport default useChat;\r\n","import logo from './logo.svg';\nimport './App.css';\nimport useChat from './useChat';\n// var io = require('socket.io')(http);\n// import Server from 'socket.io';\n\n// import socketIo from 'socket.io';\n\n// const click = () => {\n//   console.log('clicked');\n//   // let io = new Server('http'); \n//   // io.sockets.emit('action', 'payload');\n//   const { messages, sendMessage } = useChat(12345);\n//   sendMessage('test message');\n//   // useChat.sendMessage('test message');\n// }\n\nconst App = () => {\n  const { messages, sendMessage } = useChat(12345);\n  \n  const click = () => {\n    console.log('clicked');\n    // let io = new Server('http'); \n    // io.sockets.emit('action', 'payload');\n    \n    sendMessage('test message');\n  }\n\n  return (  \n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n\n        <a className=\"App-link\" href=\"#\" onClick={click}>Test</a>\n\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}